{
	"info": {
		"_postman_id": "6e72ce28-46b3-4da7-bd54-3209a7f898f8",
		"name": "Express Rest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19462281"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Add User with Bad Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badAuthenticationPayloads = pm.environment.get('badAuthenticationPayloads');\r",
									"\r",
									"if (!badAuthenticationPayloads || badAuthenticationPayloads.length === 0) {\r",
									"    badAuthenticationPayloads = [\r",
									"        {},\r",
									"        { password: 'secret', fullname: 'John Doe' },\r",
									"        { username: 123, password: 'secret', fullname: 'John Doe' },\r",
									"        { username: 'john', fullname: 'John Doe' },\r",
									"        { username: 'john', password: true, fullname: 'John Doe' },\r",
									"        { username: 'john', password: 'secret' },\r",
									"        { username: 'john', password: 'secret', fullname: [] },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadAuthenticationPayload = badAuthenticationPayloads.shift();\r",
									"pm.environment.set('currentBadAuthenticationPayload', JSON.stringify(currentBadAuthenticationPayload));\r",
									"pm.environment.set('badAuthenticationPayloads', badAuthenticationPayloads);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"   pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equals('');\r",
									"    pm.expect(responseJson.message).to.not.equals(null);\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badAuthenticationPayloads = pm.environment.get('badAuthenticationPayloads');\r",
									" \r",
									"    if(badAuthenticationPayloads && badAuthenticationPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add User with Bad Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadAuthenticationPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Forbiden Character for Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should response with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john doe\",\r\n    \"password\": \"{{newUsernameJohn}}\",\r\n    \"fullname\": \"{{newFullnameJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should response with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.userId).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}_{{$timestamp}}\",\r\n    \"password\": \"{{newPasswordJohn}}\",\r\n    \"fullname\": \"{{newFullnameJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Exist Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should response with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsernameJohn'),\r",
									"            password: pm.environment.get('newPasswordJohn'),\r",
									"            fullname: pm.environment.get('newFullnameJohn')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}\",\r\n    \"password\": \"{{newPasswordJohn}}\",\r\n    \"fullname\": \"{{newFullnameJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "[No Test] Prerequiresite",
					"item": [
						{
							"name": "Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}\",\r\n    \"password\": \"{{newPasswordJohn}}\",\r\n    \"fullname\": \"{{newFullnameJohn}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login with Invalid Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsernameJohn'),\r",
									"            password: pm.environment.get('newPasswordJohn'),\r",
									"            fullname: pm.environment.get('newFullnameJohn')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should respose with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"xxxx\",\r\n    \"password\": \"{{newPasswordJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Invalid Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsernameJohn'),\r",
									"            password: pm.environment.get('newPasswordJohn'),\r",
									"            fullname: pm.environment.get('newFullnameJohn')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should respose with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}\",\r\n    \"password\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Valid Credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsernameJohn'),\r",
									"            password: pm.environment.get('newPasswordJohn'),\r",
									"            fullname: pm.environment.get('newFullnameJohn')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should respose with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('accessTokenJohn', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshTokenJohn', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}\",\r\n    \"password\": \"{{newPasswordJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Access Token with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 200 status code', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should response with corrent message and property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.accessToken).to.not.equals('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Access Token with invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should response with corrent message and property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 200 status code', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response should contain status with success value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"});\r",
									"\r",
									"pm.test('when refreshing access token with the deleted refresh token', () => {\r",
									"    const host = pm.environment.get('host');\r",
									"    const port = pm.environment.get('port');\r",
									"    const protocol = pm.environment.get('protocol');\r",
									"    const refreshToken = pm.environment.get('refreshTokenJohn');\r",
									"\r",
									"    const putRequest = {\r",
									"        url: `${protocol}://${host}:${port}/authentications`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ refreshToken }),\r",
									"        },\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(putRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('the response code should be 400', () => {\r",
									"                pm.expect(response.code).to.equals(400);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout with Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response should contain correct status and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Threads",
			"item": [
				{
					"name": "[No Test] Prerequiresite",
					"item": [
						{
							"name": "[No Test] Add User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}\",\r\n    \"password\": \"{{newPasswordJohn}}\",\r\n    \"fullname\": \"{{newFullnameJohn}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add User Jane",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsernameJane}}\",\r\n    \"password\": \"{{newPasswordJane}}\",\r\n    \"fullname\": \"{{newFullnameJane}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login with User John",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsernameJohn'),\r",
											"            password: pm.environment.get('newPasswordJohn'),\r",
											"            fullname: pm.environment.get('newFullnameJohn')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessTokenJohn', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshTokenJohn', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsernameJohn}}\",\r\n    \"password\": \"{{newPasswordJohn}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login with User Jane",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsernameJane'),\r",
											"            password: pm.environment.get('newPasswordJane'),\r",
											"            fullname: pm.environment.get('newFullnameJane')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessTokenJane', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshTokenJane', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsernameJane}}\",\r\n    \"password\": \"{{newPasswordJane}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[empty] Get All Threads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.threads).to.be.an('array');\r",
									"    pm.expect(responseJson.data.threads).to.length.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Thread with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Thread with Bad Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badThreadPayloads = pm.environment.get('badThreadPayloads');\r",
									"\r",
									"if (!badThreadPayloads || badThreadPayloads.length === 0) {\r",
									"    badThreadPayloads = [\r",
									"        {},\r",
									"        { content: 123 },\r",
									"        { content: false },\r",
									"        { content: [] },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadThreadPayload = badThreadPayloads.shift();\r",
									"pm.environment.set('currentBadThreadPayload', JSON.stringify(currentBadThreadPayload));\r",
									"pm.environment.set('badThreadPayloads', badThreadPayloads);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should show fail status and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badThreadPayloads = pm.environment.get('badThreadPayloads');\r",
									" \r",
									"    if(badThreadPayloads && badThreadPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add Thread with Bad Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadThreadPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Thread with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should response with valid property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.threadId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('threadId', responseJson.data.threadId);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newThreadContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Threads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.threads).to.be.an('array');\r",
									"    pm.expect(responseJson.data.threads).to.length.least(1);\r",
									"\r",
									"    const threads = responseJson.data.threads;\r",
									"    threads.forEach((thread) => {\r",
									"        pm.expect(Object.keys(thread)).to.length(3);\r",
									"        pm.expect(thread.id).to.be.ok;\r",
									"        pm.expect(thread.content).to.be.ok;\r",
									"        pm.expect(thread.owner).to.be.ok;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Threads with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/xxx",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Threads with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const threadId = pm.environment.get('threadId');\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.a('object');\r",
									"    pm.expect(responseJson.data.thread).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread.id).to.equal(threadId);\r",
									"    pm.expect(responseJson.data.thread.content).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.owner).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.createdAt).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.updatedAt).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Thread with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Thread with Invalid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{updateThreadContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/xxx",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Thread with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badThreadPayloads = pm.environment.get('badThreadPayloads');\r",
									"\r",
									"if (!badThreadPayloads | badThreadPayloads.length === 0) {\r",
									"    badThreadPayloads = [\r",
									"        {},\r",
									"        { content: 123 },\r",
									"        { content: false },\r",
									"        { content: [] },\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadThreadPayload = badThreadPayloads.shift();\r",
									"pm.environment.set('currentBadThreadPayload', JSON.stringify(currentBadThreadPayload));\r",
									"pm.environment.set('badThreadPayloads', badThreadPayloads);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badThreadPayloads = pm.environment.get('badThreadPayloads');\r",
									" \r",
									"    if(badThreadPayloads && badThreadPayloads.length > 0) {\r",
									"        postman.setNextRequest('Edit Thread with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadThreadPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Thread with No Authorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJane}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{updateThreadContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Thread with Valid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail thread', () => {\r",
									"    const threadId = pm.environment.get('threadId');\r",
									"    const port = pm.environment.get('port');\r",
									"    pm.sendRequest(`http://localhost:${port}/threads/${threadId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.thread).to.be.an('object');\r",
									"                pm.expect(responseJson.data.thread.id).to.equal(threadId);\r",
									"                pm.expect(responseJson.data.thread.content).to.be.a('string');\r",
									"                pm.expect(responseJson.data.thread.owner).to.be.a('string');\r",
									"                pm.expect(responseJson.data.thread.createdAt).to.be.a('string');\r",
									"                pm.expect(responseJson.data.thread.updatedAt).to.be.a('string');\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{updateThreadContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Thread with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Thread with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/xxx",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Thread with No Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJane}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Thread with Valid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail thread', () => {\r",
									"    const threadId = pm.environment.get('threadId');\r",
									"    const port = pm.environment.get('port');\r",
									"    pm.sendRequest(`http://localhost:${port}/threads/${threadId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}